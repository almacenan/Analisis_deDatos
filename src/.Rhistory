alpha.ind = 0.1, # nivel de transparencia de los puntos filas o casos
alpha.var = 1, # nivel de transparencia de los puntos columa o variables
max.overlaps = "ggrepel.max.overlaps",
# axes = c(1, 2), # ejes que queremos graficas
ggtheme = theme_minimal())
mca$eig
fc <- FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =9)
fc <- FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =9)
FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =10, k.clust = 5)
FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =10, k.clust = 7)
FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =9)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ade4)
library(vegan)
library(FactoMineR)
library(FactoClass)
library(ggplot2)
library(factoextra)
library(PerformanceAnalytics)
library(ca)
data(tea)
Y<-tea[,c("sex","SPC","age_Q", "frequency")]
summary(Y)
mca<- MCA(Y, graph = FALSE)
summary(mca)
mca$var$contrib
fviz_contrib(mca, choice = "var", axes = 1)+labs(title = "                        Contribución Abs. de Categorías para la Dimensión 1")
fviz_cos2(mca, choice = "var", axes = 1)+labs(title = "                        Cos2 de Categorías para la Dimensión 1")
mca$var$v.test
mca$var$eta2
ind.mca<-get_mca_ind(mca)
ind.mca$coord[seq(0, nrow(ind.mca$coord) ,25) ,] # por la gran cantidad de
#datos, solo se muestran los primeros individuos
ind.mca$contrib[seq(0, nrow(ind.mca$contrib) ,25) ,]
fviz_contrib(mca, #objeto tipo lista con los resultados mca
choice = "ind", #selección de los individuos para representarlos
axes = 1, #ejes o dimensiones a incluir
top = 10) #selección de los 10 casos con mayor nivel
fviz_cos2(mca,
choice = "ind",
axes = 1:2,
top = 10)
ind.mca$cos2[seq(0, nrow(ind.mca$cos2) ,25) ,]
fviz_mca_ind(mca, col.ind = "cos2",axes = c(1, 2),
gradient.cols= c("blue", "white", "red"),
repel = TRUE,
ggtheme = theme_grey())
fviz_mca_biplot(mca, # resultados del análisis MCA
repel = TRUE, # evitar la superposición de etiquetas en la gráfica
alpha.ind = 0.1, # nivel de transparencia de los puntos filas o casos
alpha.var = 1, # nivel de transparencia de los puntos columa o variables
max.overlaps = "ggrepel.max.overlaps",
# axes = c(1, 2), # ejes que queremos graficas
ggtheme = theme_minimal())
mca$eig
indices <- FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =9)
den1 <- FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =10, k.clust = 5)
den2 <- FactoClass(Y, dudi.acm, scanFC =FALSE,nf =2, nfcl =10, k.clust = 7)
den1$clus.summ[,1:4]
den1$carac.cate
(den1$clus.summ[,2])/300
den2$clus.summ[,1:4]
(den2$clus.summ[,2])/300
den2$carac.cate
data(USJudgeRatings)
summary(USJudgeRatings)
#
judge_scaled<- scale(USJudgeRatings[,c(1:11)])
dist_judge <- dist(judge_scaled)
# Aplicar MDS métrico clásico
mds_result <- cmdscale(judge_deca, k = 2, eig = T)
# Aplicar MDS métrico clásico
mds_result <- cmdscale(dist_judge, k = 2, eig = T)
# grafica de los valores propios
plot(mds_result$eig)
plot(mds_result$points, col = "red", pch = 19,
xlab = "Dimension 1", ylab = "Dimension 2", main = "MDS Metrico - Decatlon")
text(mds_result$points, labels = rownames(decathlon), cex = 0.7, pos = 4)
plot(mds_result$points, col = "red", pch = 19,
xlab = "Dimension 1", ylab = "Dimension 2", main = "MDS Metrico - Judges")
text(mds_result$points, labels = rownames(USJudgeRatings), cex = 0.7, pos = 4)
mds_nonmetric <- isoMDS(dist_judge, k = 2)
mds_nonmetric$stress
mds_vegan <- metaMDS(dist_deca, k = 2)
mds_vegan <- metaMDS(dist_judge, k = 2)
mds_vegan$stress
mds_nonmetric$stress*100
mds_nonmetric$stress/100
ACP <- PCA(USJudgeRatings[,c(1:11)], scale.unit = TRUE)
ACP$eig
USJudgeRatings <- USJudgeRatings[,c(1:11)]
fc <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =5)
fc <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2)
fc <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2)
fc2 <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2, k.clust = 2)
fc2 <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2, k.clust = 2)
fc$clus.summ[,1:4]
fc2$clus.summ[,1:4]
fc2$clus.summ[,1:4]
fc$clus.summ[,1:4]/43
fc <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2)
fc
fc$cluster
fc$carac.cate
fc$nfcl
fc$carac.cate
fc <-FactoClass(USJudgeRatings, dudi.pca, scanFC =FALSE,nf =2, nfcl =2)
fc$carac.cate
View(fc)
View(den2)
fc2$carac.cate
fc$cluster
fc2$clus.summ[,1:4]/43
knitr::opts_chunk$set(echo = TRUE)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
data(longley)
summary(longley)
data(longley)
summary(longley)
knitr::opts_chunk$set(echo = TRUE)
p1<-ggplot(gpa2, aes(x=hsize, y=sat)) + geom_point() + theme_light() + ylab("sat") + xlab("hsize")
p1<-ggplot(longley, aes(x=GNP, y=Employed)) + geom_point() + theme_light() + ylab("Employed") + xlab("GNP")
p2<-ggplot(gpa2, aes(x=Unemployed, y=Employed)) + geom_point() + theme_light() + ylab("Employed") + xlab("Unemployed")
p2<-ggplot(longley, aes(x=Unemployed, y=Employed)) + geom_point() + theme_light() + ylab("Employed") + xlab("Unemployed")
p3<-ggplot(longley, aes(x=Armed.Forces, y=Employed)) + geom_point() + theme_light() + ylab("Employed") + xlab("Armed.Forces")
facet_wrap(~ cyl) +
labs(title = "Scatter Plots Faceted by Number of Cylinders",
x = "Weight", y = "Miles per Gallon") +
theme_minimal()
p1+p2+p3facet_wrap(~ cyl) +
labs(title = "Scatter Plots Faceted by Number of Cylinders",
x = "Weight", y = "Miles per Gallon") +
theme_minimal()
p1+facet_wrap(~ cyl) +
labs(title = "Scatter Plots Faceted by Number of Cylinders",
x = "Weight", y = "Miles per Gallon") +
theme_minimal()
p1+facet_wrap(~ p2) + facet_wrap(~ p3)
par(mfrow=c(1,3))
par(mfrow=c(1, 3))
plot(longley$GNP,longley$Employed)
plot(longley$GNP,longley$Unemployed)
plot(longley$GNP,longley$Armed.Forces)
par(mfrow=c(1, 3))
plot(longley$GNP,longley$Employed)
plot(longley$GNP,longley$Unemployed)
plot(longley$GNP,longley$Armed.Forces)
par(mfrow=c(1, 3))
par(mfrow=c(1, 3))
plot(longley$Employed,longley$GNP)
plot(longley$Employed,longley$Unemployed)
plot(longley$Employed,longley$Armed.Forces)
View(longley)
mod1 <- lm(Employed ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod1)
plot(mod1, which = 1)
plot(mod1, which = 3)
bptest(mod1)
plot(mod1, which = 2)
bptest(mod1)
plot(mod1, which = 2)
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(1, 3))
par(mfrow=c(1, 3))
plot(ln(longley$Employed),longley$GNP)
knitr::opts_chunk$set(echo = TRUE)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
data(longley)
summary(longley)
par(mfrow=c(1, 3))
plot(longley$Employed,longley$GNP)
plot(longley$Employed,longley$Unemployed)
plot(longley$Employed,longley$Armed.Forces)
mod1 <- lm(Employed ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod1)
plot(mod1, which = 1)
plot(mod1, which = 3)
bptest(mod1)
plot(mod1, which = 2)
par(mfrow=c(1, 3))
plot(ln(longley$Employed),longley$GNP)
par(mfrow=c(1, 3))
plot(log(longley$Employed),longley$GNP)
plot(log(longley$Employed),longley$Unemployed)
plot(log(longley$Employed),longley$Armed.Forces)
summary(mod2)
mod2 <- lm(log(Employed) ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod2)
plot(mod2, which = 1)
plot(mod2, which = 3)
```{r}
bptest(mod2)
plot(mod2, which = 2)
## Importando los datos
data(CreditCard)
## Importando los datos
data(CreditCard)
library(AER)
## Importando los datos
data(CreditCard)
vif(mod2)
vif(mod1)
plot(mod1, which = 1)
bptest(mod2)
shapiro.test(mod2$residuals)
bptest(mod1)
shapiro.test(mod1$residuals)
plot(mod2, which = 2)
mod2$coefficients*100
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
View(CreditCard)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
View(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
library(AER)
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
probit<-glm(card~share+income+expenditure+factor(selfemp),family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
waldtest()
waldtest(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
?waldtest
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
library(AER)
library(texreg)
library(aod)
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
confint(probit)
View(CreditCard)
CreditCard$income <- scale(CreditCard$income)
View(CreditCard)
CreditCard$expenditure <- scale(CreditCard$expenditure)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
View(CreditCard)
knitr::opts_chunk$set(echo = TRUE)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
library(AER)
library(texreg)
library(aod)
data(longley)
summary(longley)
par(mfrow=c(1, 3))
plot(longley$Employed,longley$GNP)
plot(longley$Employed,longley$Unemployed)
plot(longley$Employed,longley$Armed.Forces)
mod1 <- lm(Employed ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod1)
plot(mod1, which = 1)
vif(mod1)
plot(mod1, which = 3)
bptest(mod1)
shapiro.test(mod1$residuals)
plot(mod1, which = 2)
par(mfrow=c(1, 3))
plot(log(longley$Employed),longley$GNP)
plot(log(longley$Employed),longley$Unemployed)
plot(log(longley$Employed),longley$Armed.Forces)
mod2 <- lm(log(Employed) ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod2)
plot(mod2, which = 1)
vif(mod2)
plot(mod2, which = 3)
bptest(mod2)
shapiro.test(mod2$residuals)
plot(mod2, which = 2)
## Importando los datos
data(CreditCard)
CreditCard$income <- scale(CreditCard$income)
CreditCard$expenditure <- scale(CreditCard$expenditure)
CreditCard$income
## Importando los datos
data(CreditCard)
CreditCard$income <- scale(CreditCard$income)
CreditCard$expenditure <- scale(CreditCard$expenditure)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
confint(probit)
## Importando los datos
data(CreditCard)
View(CreditCard)
## Importando los datos
data(CreditCard)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
confint(probit)
knitr::opts_chunk$set(echo = TRUE)
logit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "logit"),data = CreditCard)
summary(logit)
R2_logit<-1-logit$deviance/logit$null.deviance
R2_logit
wald.test(b=coef(logit),Sigma=vcov(logit),Terms=1:3)
knitr::opts_chunk$set(echo = TRUE)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
library(AER)
library(texreg)
library(aod)
data(longley)
summary(longley)
par(mfrow=c(1, 3))
plot(longley$Employed,longley$GNP)
plot(longley$Employed,longley$Unemployed)
plot(longley$Employed,longley$Armed.Forces)
mod1 <- lm(Employed ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod1)
plot(mod1, which = 1)
vif(mod1)
plot(mod1, which = 3)
bptest(mod1)
shapiro.test(mod1$residuals)
plot(mod1, which = 2)
par(mfrow=c(1, 3))
plot(log(longley$Employed),longley$GNP)
plot(log(longley$Employed),longley$Unemployed)
plot(log(longley$Employed),longley$Armed.Forces)
mod2 <- lm(log(Employed) ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod2)
plot(mod2, which = 1)
vif(mod2)
plot(mod2, which = 3)
bptest(mod2)
shapiro.test(mod2$residuals)
plot(mod2, which = 2)
## Importando los datos
data(CreditCard)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
confint(probit)
wald.test(b=coef(logit),Sigma=vcov(logit),Terms=1:3)
confint(logit)
logit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "logit"),data = CreditCard)
logit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "logit"),data = CreditCard)
summary(logit)
R2_logit<-1-logit$deviance/logit$null.deviance
R2_logit
wald.test(b=coef(logit),Sigma=vcov(logit),Terms=1:3)
confint(logit)
knitr::opts_chunk$set(echo = TRUE)
data(EmplUK)
library(plm)
data(EmplUK)
knitr::opts_chunk$set(echo = TRUE)
data(Grunfeld)
names(Grunfeld)
View(Grunfeld)
View(EmplUK)
comp<-subset(EmplUK,firm %in% c(2,3,4,5,6,9))
summary(EmplUK)
View(EmplUK)
View(EmplUK)
```{r}
scatterplot(emp ~ year|firm,data = EmplUK)
knitr::opts_chunk$set(echo = TRUE)
## Librerias necesarias para el parcial
library(ggplot2)
library(lmtest)
library(sjPlot)
library(EnvStats)
library(car)
library(wooldridge)
library(plm)
library(AER)
library(texreg)
library(aod)
library(plm)
data(longley)
summary(longley)
par(mfrow=c(1, 3))
plot(longley$Employed,longley$GNP)
plot(longley$Employed,longley$Unemployed)
plot(longley$Employed,longley$Armed.Forces)
mod1 <- lm(Employed ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod1)
plot(mod1, which = 1)
vif(mod1)
plot(mod1, which = 3)
bptest(mod1)
shapiro.test(mod1$residuals)
plot(mod1, which = 2)
par(mfrow=c(1, 3))
plot(log(longley$Employed),longley$GNP)
plot(log(longley$Employed),longley$Unemployed)
plot(log(longley$Employed),longley$Armed.Forces)
mod2 <- lm(log(Employed) ~ GNP + Unemployed + Armed.Forces, data = longley)
summary(mod2)
plot(mod2, which = 1)
vif(mod2)
plot(mod2, which = 3)
bptest(mod2)
shapiro.test(mod2$residuals)
plot(mod2, which = 2)
## Importando los datos
data(CreditCard)
probit<-glm(card~share+income+expenditure+selfemp,family = binomial(link = "probit"),data = CreditCard)
summary(probit)
R2_probit<-1-probit$deviance/probit$null.deviance
R2_probit
wald.test(b=coef(probit),Sigma=vcov(probit),Terms=1:3)
confint(probit)
scatterplot(emp ~ year|firm,data = EmplUK)
data.p <- plm::pdata.frame(EmplUK, # objeto o data frame original
index = c("firm", # variable que contiene a la unidad de análisis
"year")) # variable que se refiere al periodo o tiempo
data.p <- plm::pdata.frame(EmplUK, # objeto o data frame original
index = c("firm", # variable que contiene a la unidad de análisis
"year")) # variable que se refiere al periodo o tiempo
head(data.p)
View(EmplUK)
efectos_fijos_ind <- plm(emp ~ wage+capital+output, data = data.p, effect="ind", index = c("firm", "year"), model = "within")
#
summary(efectos_fijos_ind)
confint(efectos_fijos_ind)
efectos_fijos_temp <- plm(emp ~ wage+capital+output, data = data.p, index = c("firm", "year"), effect = "time", model = "within")
#
summary(efectos_fijos_temp)
confint(efectos_fijos_temp)
efectos_twoways <- plm(emp ~ wage+capital+output, data = data.p, index = c("firm", "year"), effect = "twoways", model = "within")
#
summary(efectos_twoways)
confint(efectos_twoways)
setwd("C:/Users/dsant/OneDrive/Escritorio/AED2025/src")
rm(list = ls())
inPath <- file.path("input/")
outPath <- file.path("output/")
srcPath <- file.path("src/")
#install.packages("dplyr")
library(dplyr)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("openxlsx")
library(openxlsx)
install.packages("openxlsx")
#install.packages("openxlsx")
library(openxlsx)
#install.packages("ggplot2")
library(ggplot2)
source("src/config.R")
source("src/config.R")
setwd("C:/Users/dsant/Desktop/AED2025")
setwd("C:/Users/dsant/Escritorio/AED2025")
rm(list = ls())
outPath <- file.path("output/")
srcPath <- file.path("src/")
rm(list = ls())
inPath <- file.path("input/")
outPath <- file.path("output/")
srcPath <- file.path("src/")
source(file.path(srcPath,"dependencies.R"))
